/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface HabitLogs {
  completed_at: Generated<Timestamp | null>;
  habit_id: number;
  id: Generated<number>;
  note: string | null;
}

export interface Habits {
  created_at: Generated<Timestamp | null>;
  frequency: string | null;
  id: Generated<number>;
  name: string;
  user_id: number;
}

export interface HabitTags {
  habit_id: number;
  id: Generated<number>;
  tag: string;
}

export interface Reminders {
  habit_id: number;
  id: Generated<number>;
  method: string | null;
  remind_at: Timestamp;
}

export interface Tokens {
  expires_at: Timestamp | null;
  id: Generated<number>;
  issued_at: Timestamp | null;
  refresh_token: string;
  revoked: Generated<boolean | null>;
  user_id: number;
}

export interface UserProfiles {
  avatar_url: string | null;
  bio: string | null;
  full_name: string | null;
  id: Generated<number>;
  user_id: number;
}

export interface Users {
  created_at: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  password_hash: string;
}

export interface DB {
  habit_logs: HabitLogs;
  habit_tags: HabitTags;
  habits: Habits;
  reminders: Reminders;
  tokens: Tokens;
  user_profiles: UserProfiles;
  users: Users;
}
